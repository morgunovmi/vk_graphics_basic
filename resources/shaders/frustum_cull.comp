#version 430
#extension GL_GOOGLE_include_directive : require

#include "common.h"

layout(local_size_x = 32) in;

layout(push_constant) uniform params
{
    mat4 mProjView;
    BBox bbox;
    uint instanceCount;
} PushConstant;

layout(std430, binding = 0) readonly buffer InstanceMats
{
    mat4 instanceMatrices[];
};

layout(std430, binding = 1) buffer VisibleInd
{
    uint visibleIndices[];
};

layout(std430, binding = 2) buffer VisibleCount
{
    uint visibleCount;
};

bool isVisible(mat4 mvp, BBox box)
{
    vec4 corners[8] = {
        {box.min.x, box.min.y, box.min.z, 1.0}, // x y z
        {box.max.x, box.min.y, box.min.z, 1.0}, // X y z
        {box.min.x, box.max.y, box.min.z, 1.0}, // x Y z
        {box.max.x, box.max.y, box.min.z, 1.0}, // X Y z

        {box.min.x, box.min.y, box.max.z, 1.0}, // x y Z
        {box.max.x, box.min.y, box.max.z, 1.0}, // X y Z
        {box.min.x, box.max.y, box.max.z, 1.0}, // x Y Z
        {box.max.x, box.max.y, box.max.z, 1.0}, // X Y Z
    };

    bool inside = false;

    for (uint i = 0; i < 8; ++i) {
        // Transform corner to clip space
        vec4 corner = mvp * corners[i];

        inside = inside ||
            -corner.w <= corner.x && corner.x <= corner.w &&
            -corner.w <= corner.y && corner.y <= corner.w &&
            0.0 <= corner.z && corner.z <= corner.w;
    }

    return true;
}

void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx < PushConstant.instanceCount)
    {
        mat4 mvp = instanceMatrices[idx] * PushConstant.mProjView;
        if (isVisible(mvp, PushConstant.bbox))
        {
            uint newIndex = atomicAdd(visibleCount, 1);
            visibleIndices[newIndex] = idx;
        }
    }
}