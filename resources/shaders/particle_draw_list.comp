#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require

#include "common.h"

layout( local_size_x = 1 ) in;

layout(push_constant) uniform params_t
{
    mat4 mProjView;
    mat4 mModel;
} params;

layout(std430, binding = 0) buffer particleBuffer
{
    Particle particles[];
};

layout(std430, binding = 1) buffer particleStatsBuffer
{
    ParticleStats particleStats;
};

layout(std430, binding = 2) buffer particleDrawListBuffer
{
    ParticleDrawData drawData[];
};

layout(std430, binding = 3) buffer DrawIndirectBuffer
{
    DrawIndirectCommand drawIndirect;
};

layout(binding = 4) uniform AppData
{
    UniformParams Params;
};

void main() 
{
    uint drawIndex = 0;
    float prevWrittenDist = 123456.0;
    for (int j = 0; j < particleStats.particleCount; ++j)
    {
        float maxDist = 0.0;
        uint maxDistIndex = 0;
        for (uint i = 0; i < 1024; ++i)
        {
            Particle p = particles[i];
            if (p.isAlive)
            {
                const float dist = distance((params.mModel * p.pos).xyz, Params.cameraPos);
                if (dist > maxDist && dist < prevWrittenDist)
                {
                    maxDist = dist;
                    maxDistIndex = i;
                }
            }
        }
        Particle p = particles[maxDistIndex];
        drawData[drawIndex].pos = p.pos;
        drawData[drawIndex].rot = p.rot;
        drawData[drawIndex].scale = p.scale;
        drawData[drawIndex].opacity = p.lifetime / Params.particleLifetime;
        ++drawIndex;
        prevWrittenDist = maxDist;
    }

    drawIndirect.vertexCount = 6;
    drawIndirect.instanceCount = particleStats.particleCount;
    drawIndirect.firstVertex = 0;
    drawIndirect.firstInstance = 0;
}