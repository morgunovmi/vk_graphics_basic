#version 430

layout( local_size_x = 32, local_size_y = 32 ) in;

layout( binding = 0, rg16 ) uniform readonly image2D rawImage;
layout( binding = 1, rg16 ) uniform writeonly image2D filteredImage;

const int kernelSize = 41;
const int kernelRadius = kernelSize / 2;

layout( push_constant ) uniform params {
  float gaussCoeffs[kernelSize];
  float direction;
} PushConst;

void main()
{
    ivec2 size = imageSize(rawImage);
    ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.xy);

    ivec2 direction = PushConst.direction == 1 ? ivec2(1, 0) : ivec2(0, 1);

    if (pixel_coord.x < size.x && pixel_coord.y < size.y)
    {
        vec2 sum = vec2(0.0);

        for (int i = 0; i < kernelSize; ++i)
        {
            ivec2 pc = pixel_coord + direction * (i - kernelRadius);
            if (pc.x < 0) pc.x = 0;
            if (pc.y < 0) pc.y = 0;
            if (pc.x >= size.x) pc.x = size.x - 1;
            if (pc.y >= size.y) pc.y = size.y - 1;

            sum += PushConst.gaussCoeffs[i] * imageLoad(rawImage, pc).xy;
        }

        imageStore(filteredImage, pixel_coord, vec4(sum, 0.0, 0.0));
    }
}